-- parent table
CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);

-- child table + foreign key
CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id)
);

CREATE TABLE
postgres=# \d
                   List of relations
 Schema |          Name           |   Type   |  Owner   
--------+-------------------------+----------+----------
 public | departments             | table    | postgres
 public | departments_dept_id_seq | sequence | postgres
 public | employees               | table    | postgres
 public | employees_emp_id_seq    | sequence | postgres
(4 rows)
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(#   emp_id SERIAL PRIMARY KEY,
postgres(#   first_name VARCHAR(50) NOT NULL,
postgres(#   last_name VARCHAR(50) NOT NULL,
postgres(#   dept_id INTEGER,
postgres(#   FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employee_department
postgres-# FOREIGN KEY(dept_id) REFERENCES departments(dept_id);
ALTER TABLE
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default                  
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null | 
 last_name  | character varying(50) |           | not null | 
 dept_id    | integer               |           |          | 
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
    "fk_employee_department" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)

postgres=# DROP TABLE employees
postgres-# ;
DROP TABLE

INSERT INTO departments(dept_name, location) VALUES
    ('eNGINEERING', 'Building A'),
    ('Marketing', 'bUILDING b'),
    ('HR', 'Building C');

INSERT INTO employees(first_name, last_name, dept_id) VALUES
    ('John', 'Smith', 1);

INSERT 0 3
INSERT 0 1

postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('Jane', 'Doe', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".

postgres=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "employees_dept_id_fkey" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".

DROP TABLE employees;

CREATE TABLE employees (
  emp_id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  dept_id INTEGER,
  FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE CASCADE
);

DROP TABLE
CREATE TABLE

postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1

DROP TABLE employees;

CREATE TABLE employees (
  emp_id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON DELETE SET DEFAULT
);

 dept_id    | integer               |           |          | 0


postgres=# SELECT * FROM departments
;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       1 | Engineering | Building A
(1 row)

DROP TABLE employees;

CREATE TABLE employees (
  emp_id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
);

UPDATE departments SET dept_id = 100 WHERE dept_id = 1;

CREATE TABLE
UPDATE 1

postgres=# SELECT * FROM departments
;
 dept_id |  dept_name  |  location  
---------+-------------+------------
     100 | Engineering | Building A
(1 row)

-- Parent table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- one-to-one relationship
CREATE TABLE user_profiles (
    profile_id SERIAL PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    bio TEXT,
    profile_picture_url VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
)

psql -U postgres -f lab3.sql
CREATE TABLE
CREATE TABLE

INSERT INTO users (username, email) VALUES
    ('johndoe', 'john@example.com');

INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
    (1, 'John', 'Doe', 'Software dev');

INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
    (1, 'Jane', 'Smith');

DETAIL:  Key (user_id)=(1) already exists.

-- Parent Table (one side)
CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    manager_name VARCHAR(100),
    budget DECIMAL(10,2)
);

-- child table
CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    position VARCHAR(100),
    salary DECIMAL(10, 2),
    hire_date DATE DEFAULT CURRENT_DATE,
    dept_id INTEGER NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);

-- Parent table
CREATE TABLE blog_posts (
    post_id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    author VARCHAR(100),
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Child table
CREATE TABLE comments (
    comment_id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL,
    commenter_name VARCHAR(100),
    comment_text TEXT NOT NULL,
    comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES blog_posts (post_id) ON DELETE CASCADE
);

CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE


-- Parent Table (one side)
CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    manager_name VARCHAR(100),
    budget DECIMAL(10,2)
);

-- child table
CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    position VARCHAR(100),
    salary DECIMAL(10, 2),
    hire_date DATE DEFAULT CURRENT_DATE,
    dept_id INTEGER NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);

-- Parent table
CREATE TABLE blog_posts (
    post_id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    author VARCHAR(100),
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Child table
CREATE TABLE comments (
    comment_id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL,
    commenter_name VARCHAR(100),
    comment_text TEXT NOT NULL,
    comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES blog_posts (post_id) ON DELETE CASCADE
);


-- Insert departments
INSERT INTO departments (dept_name, manager_name, budget) VALUES
    ('Engineering', 'Alice Johnson', 500000.00),
    ('Marketing', 'Bob Wilson', 200000.00);

-- Insert multiple employees for one department
INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
    ('John', 'Smith', 'Software Engineer', 75000.00, 1),
    ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
    ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1);



INSERT 0 2
INSERT 0 3

-- Relationship info
SELECT d.dept_id, d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;

 dept_id |  dept_name  | first_name | last_name |     position      
---------+-------------+------------+-----------+-------------------
       1 | Engineering | Mike       | Brown     | DevOps Engineer
       1 | Engineering | Mike       | Brown     | DevOps Engineer
       1 | Engineering | Jane       | Doe       | Senior Developer
       1 | Engineering | Jane       | Doe       | Senior Developer
       1 | Engineering | John       | Smith     | Software Engineer
       1 | Engineering | John       | Smith     | Software Engineer


-- Many-to-many Relationships


-- 1st parent table
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    enrollment_date DATE DEFAULT CURRENT_DATE
);

-- 2nd parent table
CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_code VARCHAR(10) UNIQUE NOT NULL,
    course_name VARCHAR(100) NOT NULL,
    credits INTEGER NOT NULL,
    instructor VARCHAR(100)
);

-- Junction table
CREATE TABLE student_enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    grade CHAR(2), -- Additional attributes

    -- Foreign key constraints
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,

    UNIQUE(student_id, course_id)
);

CREATE TABLE
CREATE TABLE
CREATE TABLE



INSERT INTO students (first_name, last_name, email) VALUES
    ('Alice', 'Johnson', 'alice@university.edu'),
    ('Bob', 'Smith', 'bob@university.edu'),
    ('Carol', 'Wilson', 'carol@university.edu');


INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
    ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
    ('CS201', 'Data Structures', 4, 'Dr. Davis'),
    ('MATH101', 'Calculus I', 4, 'Dr. Wilson');

-- -- Enroll students in multiple courses
INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
    (1, 1, 'A'),
    (1, 2, 'B+'),
    (2, 1, 'A-'),
    (2, 3, 'B'),
    (3, 2, 'A'),
    (3, 3, 'A-');

-- -- Complex quiery 
SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;


 student_name  | course_code |         course_name         | grade | enrollment_date 
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-09-04
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-09-04
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-09-04
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-09-04
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-09-04
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-09-04
(6 rows)

SELECT s.first_name, s.last_name, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'CS101';

 first_name | last_name | grade 
------------+-----------+-------
 Alice      | Johnson   | A 
 Bob        | Smith     | A-
(2 rows)

SELECT c.course_code, c.course_name, c.credits, se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'alice@university.edu';

 course_code |         course_name         | credits | grade 
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A 
 CS201       | Data Structures             |       4 | B+
(2 rows)
