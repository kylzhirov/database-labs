-- create data
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    faculty VARCHAR(100)
);

-- insert data
INSERT INTO students (student_id, name, email, faculty) VALUES
    (1, 'Alymbek', 'alymbek@example.com', 'AMI'),
    (2, 'Timur', 'timur@example.com', 'SFW'),
    (3, 'Beka', 'beka@example.com', 'SFW');


-- View data
SELECT * FROM students;

postgres=# SELECT * FROM students;
 student_id |  name   |        email        | faculty 
------------+---------+---------------------+---------
          1 | Alymbek | alymbek@example.com | AMI
          2 | Timur   | timur@example.com   | SFW
          3 | Beka    | beka@example.com    | SFW
(3 rows)

postgres=# SELECT student_id, faculty FROM students;
 student_id | faculty 
------------+---------
          1 | AMI
          2 | SFW
          3 | SFW
(3 rows)

postgres=# SELECT name, email FROM students WHERE name = 'Timur';
 name  |       email       
-------+-------------------
 Timur | timur@example.com
(1 row)


postgres=# SELECT name, email FROM students ORDER BY name;
  name   |        email        
---------+---------------------
 Alymbek | alymbek@example.com
 Beka    | beka@example.com
 Timur   | timur@example.com
(3 rows)

postgres=# SELECT name, email FROM students LIMIT 2;
  name   |        email        
---------+---------------------
 Alymbek | alymbek@example.com
 Timur   | timur@example.com
(2 rows)

postgres-# -- This query retrieves all students from the SFW faculty.
postgres-# SELECT name, faculty FROM students WHERE faculty = 'SFW';
 name  | faculty 
-------+---------
 Timur | SFW
 Beka  | SFW
(2 rows)

postgres=# 
postgres=# /* This is a multi-line comment.
postgres*# It can span multiple lines for detailed explanations. */
