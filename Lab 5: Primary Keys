university=# CREATE TABLE students (
university(#     student_id INTEGER PRIMARY KEY,
university(#     name VARCHAR(100),
university(#     email VARCHAR(150)
university(# );
CREATE TABLE
university=# 
university=# SELECT * FROM students;
 student_id | name | email 
------------+------+-------
(0 rows)

university(#     CONSTRAINT pk_students PRIMARY KEY (student_id)
university(# );
CREATE TABLE
university=# SELECT * FROM students
;
 student_id | name | email 
------------+------+-------
(0 rows)



university=# -- Insert sample data
university=# INSERT INTO students (name, email, faculty) VALUES
university-# ('Alice Johnson', 'alice@alatoo.edu.kg', 'Computer Science'),
university-# ('Bob Smith', 'bob@alatoo.edu.kg', 'Mathematics'),
university-# ('Carol Davis', 'carol@alatoo.edu.kg', 'Computer Science');
INSERT 0 3
university=# SELECT * FROM students;
 student_id |     name      |        email        |     faculty      
------------+---------------+---------------------+------------------
          1 | Alice Johnson | alice@alatoo.edu.kg | Computer Science
          2 | Bob Smith     | bob@alatoo.edu.kg   | Mathematics
          3 | Carol Davis   | carol@alatoo.edu.kg | Computer Science
(3 rows)


university=# -- Insert sample data
university=# INSERT INTO course_enrollments (student_id, course_id, semester, grade) VALUES
university-# (1, 101, '2024-Spring', 'A'),
university-# (1, 102, '2024-Spring', 'B+'),
university-# (2, 101, '2024-Spring', 'A-'),
university-# (1, 101, '2024-Fall', 'A+');  -- Same student can take same course in different semester
INSERT 0 4
university=# \d course_enrollments
                       Table "public.course_enrollments"
     Column      |         Type          | Collation | Nullable |   Default    
-----------------+-----------------------+-----------+----------+--------------
 student_id      | integer               |           | not null | 
 course_id       | integer               |           | not null | 
 semester        | character varying(20) |           | not null | 
 enrollment_date | date                  |           |          | CURRENT_DATE
 grade           | character(2)          |           |          | 
Indexes:
    "course_enrollments_pkey" PRIMARY KEY, btree (student_id, course_id, semester)

university=# 

university=# CREATE TABLE products (
university(#     product_id SERIAL PRIMARY KEY,
university(#     product_name VARCHAR(100) NOT NULL,
university(#     price DECIMAL(10,2)
university(# );
CREATE TABLE
university=# 
university=# \d products
                                           Table "public.products"
    Column    |          Type          | Collation | Nullable |                   Default     
               
--------------+------------------------+-----------+----------+-------------------------------
---------------
 product_id   | integer                |           | not null | nextval('products_product_id_s
eq'::regclass)
 product_name | character varying(100) |           | not null | 
 price        | numeric(10,2)          |           |          | 
Indexes:
    "products_pkey" PRIMARY KEY, btree (product_id)


university=# CREATE TABLE transactions (
university(#     transaction_id BIGSERIAL PRIMARY KEY,  -- Can handle very large numbers
university(#     amount DECIMAL(15,2),
university(#     transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
university(# );
CREATE TABLE

university=# CREATE TABLE orders (
university(#     order_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
university(#     customer_name VARCHAR(100),
university(#     order_date DATE DEFAULT CURRENT_DATE
university(# );
CREATE TABLE

university=# CREATE TABLE customers (
university(#     customer_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
university(#     customer_name VARCHAR(100),
university(#     email VARCHAR(150)
university(# );
CREATE TABLE


university=# INSERT INTO customers (customer_id, customer_name, email) 
university-# VALUES (1000, 'VIP Customer', 'vip@example.com');
INSERT 0 1
university=# SELECT * FROM customers;
 customer_id | customer_name |      email      
-------------+---------------+-----------------
        1000 | VIP Customer  | vip@example.com
(1 row)

university=# CREATE TABLE departments (
university(#     dept_id INTEGER PRIMARY KEY,
university(#     dept_name VARCHAR(100)
university(# );
CREATE TABLE

-- This will fail due to duplicate primary key
university=# INSERT INTO departments VALUES (1, 'Computer Science');
INSERT 0 1
university=# INSERT INTO departments VALUES (1, 'Mathematics'); -- ERROR: duplicate key value
ERROR:  duplicate key value violates unique constraint "departments_pkey"
DETAIL:  Key (dept_id)=(1) already exists.

university=# INSERT INTO departments VALUES (NULL, 'Physics');
ERROR:  null value in column "dept_id" of relation "departments" violates not-null constraint
DETAIL:  Failing row contains (null, Physics).

-- primary key can not be NULL

university=# \d university_students 
                                      Table "public.university_students"
    Column     |          Type          | Collation | Nullable |                   Default    
                
---------------+------------------------+-----------+----------+------------------------------
----------------
 student_id    | integer                |           | not null | nextval('students_student_id_
seq'::regclass)
 first_name    | text                   |           | not null | 
 last_name     | character varying(50)  |           | not null | 
 email_address | character varying(100) |           | not null | 
 faculty       | character varying(100) |           |          | 
 date_of_birth | date                   |           |          | 
Indexes:
    "students_pkey" PRIMARY KEY, btree (student_id)
    "students_email_key" UNIQUE CONSTRAINT, btree (email_address)
    "unique_student_email" UNIQUE CONSTRAINT, btree (email_address)


